// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EXAMPLE_MYPROJECT_EXAMPLE_H_
#define FLATBUFFERS_GENERATED_EXAMPLE_MYPROJECT_EXAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MyProject {
namespace Example {

struct Vec3;

struct Monster;
struct MonsterBuilder;

struct Weapon;
struct WeaponBuilder;

struct Pickup;
struct PickupBuilder;

struct SearchRequest;
struct SearchRequestBuilder;

enum Color : int8_t {
  Color_Red = 0,
  Color_Green = 1,
  Color_Blue = 2,
  Color_MIN = Color_Red,
  Color_MAX = Color_Blue
};

inline const Color (&EnumValuesColor())[3] {
  static const Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char * const *EnumNamesColor() {
  static const char * const names[4] = {
    "Red",
    "Green",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  if (::flatbuffers::IsOutRange(e, Color_Red, Color_Blue)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesColor()[index];
}

enum Any : uint8_t {
  Any_NONE = 0,
  Any_Monster = 1,
  Any_Weapon = 2,
  Any_Pickup = 3,
  Any_MIN = Any_NONE,
  Any_MAX = Any_Pickup
};

inline const Any (&EnumValuesAny())[4] {
  static const Any values[] = {
    Any_NONE,
    Any_Monster,
    Any_Weapon,
    Any_Pickup
  };
  return values;
}

inline const char * const *EnumNamesAny() {
  static const char * const names[5] = {
    "NONE",
    "Monster",
    "Weapon",
    "Pickup",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  if (::flatbuffers::IsOutRange(e, Any_NONE, Any_Pickup)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<MyProject::Example::Monster> {
  static const Any enum_value = Any_Monster;
};

template<> struct AnyTraits<MyProject::Example::Weapon> {
  static const Any enum_value = Any_Weapon;
};

template<> struct AnyTraits<MyProject::Example::Pickup> {
  static const Any enum_value = Any_Pickup;
};

bool VerifyAny(::flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Monster FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_COLOR = 16,
    VT_TEST_TYPE = 18,
    VT_TEST = 20
  };
  const MyProject::Example::Vec3 *pos() const {
    return GetStruct<const MyProject::Example::Vec3 *>(VT_POS);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 150);
  }
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 100);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  MyProject::Example::Color color() const {
    return static_cast<MyProject::Example::Color>(GetField<int8_t>(VT_COLOR, 2));
  }
  MyProject::Example::Any test_type() const {
    return static_cast<MyProject::Example::Any>(GetField<uint8_t>(VT_TEST_TYPE, 0));
  }
  const void *test() const {
    return GetPointer<const void *>(VT_TEST);
  }
  template<typename T> const T *test_as() const;
  const MyProject::Example::Monster *test_as_Monster() const {
    return test_type() == MyProject::Example::Any_Monster ? static_cast<const MyProject::Example::Monster *>(test()) : nullptr;
  }
  const MyProject::Example::Weapon *test_as_Weapon() const {
    return test_type() == MyProject::Example::Any_Weapon ? static_cast<const MyProject::Example::Weapon *>(test()) : nullptr;
  }
  const MyProject::Example::Pickup *test_as_Pickup() const {
    return test_type() == MyProject::Example::Any_Pickup ? static_cast<const MyProject::Example::Pickup *>(test()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MyProject::Example::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<int16_t>(verifier, VT_MANA, 2) &&
           VerifyField<int16_t>(verifier, VT_HP, 2) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.VerifyVector(inventory()) &&
           VerifyField<int8_t>(verifier, VT_COLOR, 1) &&
           VerifyField<uint8_t>(verifier, VT_TEST_TYPE, 1) &&
           VerifyOffset(verifier, VT_TEST) &&
           VerifyAny(verifier, test(), test_type()) &&
           verifier.EndTable();
  }
};

template<> inline const MyProject::Example::Monster *Monster::test_as<MyProject::Example::Monster>() const {
  return test_as_Monster();
}

template<> inline const MyProject::Example::Weapon *Monster::test_as<MyProject::Example::Weapon>() const {
  return test_as_Weapon();
}

template<> inline const MyProject::Example::Pickup *Monster::test_as<MyProject::Example::Pickup>() const {
  return test_as_Pickup();
}

struct MonsterBuilder {
  typedef Monster Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const MyProject::Example::Vec3 *pos) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(Monster::VT_MANA, mana, 150);
  }
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(Monster::VT_HP, hp, 100);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  void add_inventory(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  void add_color(MyProject::Example::Color color) {
    fbb_.AddElement<int8_t>(Monster::VT_COLOR, static_cast<int8_t>(color), 2);
  }
  void add_test_type(MyProject::Example::Any test_type) {
    fbb_.AddElement<uint8_t>(Monster::VT_TEST_TYPE, static_cast<uint8_t>(test_type), 0);
  }
  void add_test(::flatbuffers::Offset<void> test) {
    fbb_.AddOffset(Monster::VT_TEST, test);
  }
  explicit MonsterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Monster> CreateMonster(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const MyProject::Example::Vec3 *pos = nullptr,
    int16_t mana = 150,
    int16_t hp = 100,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> inventory = 0,
    MyProject::Example::Color color = MyProject::Example::Color_Blue,
    MyProject::Example::Any test_type = MyProject::Example::Any_NONE,
    ::flatbuffers::Offset<void> test = 0) {
  MonsterBuilder builder_(_fbb);
  builder_.add_test(test);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_test_type(test_type);
  builder_.add_color(color);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Monster> CreateMonsterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const MyProject::Example::Vec3 *pos = nullptr,
    int16_t mana = 150,
    int16_t hp = 100,
    const char *name = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    MyProject::Example::Color color = MyProject::Example::Color_Blue,
    MyProject::Example::Any test_type = MyProject::Example::Any_NONE,
    ::flatbuffers::Offset<void> test = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto inventory__ = inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0;
  return MyProject::Example::CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      name__,
      inventory__,
      color,
      test_type,
      test);
}

struct Weapon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WeaponBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DAMAGE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int16_t damage() const {
    return GetField<int16_t>(VT_DAMAGE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_DAMAGE, 2) &&
           verifier.EndTable();
  }
};

struct WeaponBuilder {
  typedef Weapon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Weapon::VT_NAME, name);
  }
  void add_damage(int16_t damage) {
    fbb_.AddElement<int16_t>(Weapon::VT_DAMAGE, damage, 0);
  }
  explicit WeaponBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Weapon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Weapon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Weapon> CreateWeapon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int16_t damage = 0) {
  WeaponBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_damage(damage);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Weapon> CreateWeaponDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t damage = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return MyProject::Example::CreateWeapon(
      _fbb,
      name__,
      damage);
}

struct Pickup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PickupBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct PickupBuilder {
  typedef Pickup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit PickupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pickup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pickup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pickup> CreatePickup(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  PickupBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SearchRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SearchRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUERY = 4,
    VT_PAGE_NUMBER = 6,
    VT_RESULTS_PER_PAGE = 8,
    VT_VAL = 10
  };
  const ::flatbuffers::String *query() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUERY);
  }
  int32_t page_number() const {
    return GetField<int32_t>(VT_PAGE_NUMBER, 0);
  }
  int32_t results_per_page() const {
    return GetField<int32_t>(VT_RESULTS_PER_PAGE, 0);
  }
  bool val() const {
    return GetField<uint8_t>(VT_VAL, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_QUERY) &&
           verifier.VerifyString(query()) &&
           VerifyField<int32_t>(verifier, VT_PAGE_NUMBER, 4) &&
           VerifyField<int32_t>(verifier, VT_RESULTS_PER_PAGE, 4) &&
           VerifyField<uint8_t>(verifier, VT_VAL, 1) &&
           verifier.EndTable();
  }
};

struct SearchRequestBuilder {
  typedef SearchRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_query(::flatbuffers::Offset<::flatbuffers::String> query) {
    fbb_.AddOffset(SearchRequest::VT_QUERY, query);
  }
  void add_page_number(int32_t page_number) {
    fbb_.AddElement<int32_t>(SearchRequest::VT_PAGE_NUMBER, page_number, 0);
  }
  void add_results_per_page(int32_t results_per_page) {
    fbb_.AddElement<int32_t>(SearchRequest::VT_RESULTS_PER_PAGE, results_per_page, 0);
  }
  void add_val(bool val) {
    fbb_.AddElement<uint8_t>(SearchRequest::VT_VAL, static_cast<uint8_t>(val), 0);
  }
  explicit SearchRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SearchRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SearchRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SearchRequest> CreateSearchRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> query = 0,
    int32_t page_number = 0,
    int32_t results_per_page = 0,
    bool val = false) {
  SearchRequestBuilder builder_(_fbb);
  builder_.add_results_per_page(results_per_page);
  builder_.add_page_number(page_number);
  builder_.add_query(query);
  builder_.add_val(val);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SearchRequest> CreateSearchRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *query = nullptr,
    int32_t page_number = 0,
    int32_t results_per_page = 0,
    bool val = false) {
  auto query__ = query ? _fbb.CreateString(query) : 0;
  return MyProject::Example::CreateSearchRequest(
      _fbb,
      query__,
      page_number,
      results_per_page,
      val);
}

inline bool VerifyAny(::flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_Monster: {
      auto ptr = reinterpret_cast<const MyProject::Example::Monster *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_Weapon: {
      auto ptr = reinterpret_cast<const MyProject::Example::Weapon *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_Pickup: {
      auto ptr = reinterpret_cast<const MyProject::Example::Pickup *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyAnyVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyProject::Example::Monster *GetMonster(const void *buf) {
  return ::flatbuffers::GetRoot<MyProject::Example::Monster>(buf);
}

inline const MyProject::Example::Monster *GetSizePrefixedMonster(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MyProject::Example::Monster>(buf);
}

inline bool VerifyMonsterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyProject::Example::Monster>(nullptr);
}

inline bool VerifySizePrefixedMonsterBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyProject::Example::Monster>(nullptr);
}

inline void FinishMonsterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyProject::Example::Monster> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMonsterBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyProject::Example::Monster> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Example
}  // namespace MyProject

#endif  // FLATBUFFERS_GENERATED_EXAMPLE_MYPROJECT_EXAMPLE_H_
